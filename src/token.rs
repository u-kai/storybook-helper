#[derive(Debug, PartialEq)]
pub(super) struct TSXToken {
    pub token_type: TSXTokenType,
    pub literal: String,
}
impl TSXToken {
    pub fn new(token_type: TSXTokenType, literal: impl Into<String>) -> Self {
        Self {
            token_type,
            literal: literal.into(),
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum TSXTokenType {
    Comment,
    StartDocComment,
    EndDocComment,
    Increment,
    Add,
    Sub,
    Colon,
    Dot,
    DoubleQuote,
    SingleQuote,
    CrossEqual,
    From,
    IncrementEqual,
    DecrementEqual,
    SlashEqual,
    Decrement,
    Pipe,
    Or,
    Assign,
    Eof,
    NumberLiteral,
    Ident,
    Plus,
    Minus,
    Bang,
    Asterisk,
    Slash,
    LTag,
    RTag,
    CloseLTag,
    CloseRTag,
    LtEq,
    GtEq,
    Comma,
    Semicolon,
    LParentheses,
    RParentheses,
    LCurlyBracket,
    RCurlyBracket,
    LBracket,
    RBracket,
    Eq,
    NotEq,
    Fn,
    True,
    False,
    If,
    Else,
    Return,
    Let,
    Var,
    Const,
    Question,
    NullishCoalescing,
    Type,
    StringLiteral,
    Class,
    Export,
    Import,
    Default,
    Arrow,
    String,
    Number,
    Boolean,
    Undefined,
    And,
}
impl TSXTokenType {
    pub fn to_str(&self) -> &'static str {
        match self {
            TSXTokenType::And => "&",
            TSXTokenType::Comment => "//",
            TSXTokenType::StartDocComment => "/**",
            TSXTokenType::EndDocComment => "*/",
            TSXTokenType::Increment => "++",
            TSXTokenType::Add => "+",
            TSXTokenType::Sub => "-",
            TSXTokenType::Colon => ":",
            TSXTokenType::Dot => ".",
            TSXTokenType::DoubleQuote => "\"",
            TSXTokenType::SingleQuote => "'",
            TSXTokenType::CrossEqual => "===",
            TSXTokenType::From => "from",
            TSXTokenType::IncrementEqual => "+=",
            TSXTokenType::DecrementEqual => "-=",
            TSXTokenType::SlashEqual => "/=",
            TSXTokenType::Decrement => "--",
            TSXTokenType::Pipe => "|",
            TSXTokenType::Or => "||",
            TSXTokenType::Assign => "=",
            TSXTokenType::Eof => "",
            TSXTokenType::NumberLiteral => "number",
            TSXTokenType::Ident => "ident",
            TSXTokenType::Plus => "+",
            TSXTokenType::Minus => "-",
            TSXTokenType::Bang => "!",
            TSXTokenType::Asterisk => "*",
            TSXTokenType::Slash => "/",
            TSXTokenType::LTag => "<",
            TSXTokenType::RTag => ">",
            TSXTokenType::CloseLTag => "</",
            TSXTokenType::CloseRTag => "/>",
            TSXTokenType::LtEq => "<=",
            TSXTokenType::GtEq => ">=",
            TSXTokenType::Comma => ",",
            TSXTokenType::Semicolon => ";",
            TSXTokenType::LParentheses => "(",
            TSXTokenType::RParentheses => ")",
            TSXTokenType::LCurlyBracket => "{",
            TSXTokenType::RCurlyBracket => "}",
            TSXTokenType::LBracket => "[",
            TSXTokenType::RBracket => "]",
            TSXTokenType::Eq => "==",
            TSXTokenType::NotEq => "!=",
            TSXTokenType::Fn => "fn",
            TSXTokenType::True => "true",
            TSXTokenType::False => "false",
            TSXTokenType::If => "if",
            TSXTokenType::Else => "else",
            TSXTokenType::Return => "return",
            TSXTokenType::Let => "let",
            TSXTokenType::Var => "var",
            TSXTokenType::Const => "const",
            TSXTokenType::Question => "?",
            TSXTokenType::NullishCoalescing => "??",
            TSXTokenType::Type => "type",
            TSXTokenType::StringLiteral => "string",
            TSXTokenType::Class => "class",
            TSXTokenType::Export => "export",
            TSXTokenType::Import => "import",
            TSXTokenType::Default => "default",
            TSXTokenType::Arrow => "=>",
            TSXTokenType::String => "string",
            TSXTokenType::Number => "number",
            TSXTokenType::Boolean => "boolean",
            TSXTokenType::Undefined => "undefined",
            TSXTokenType::From => "from",
        }
    }
}
